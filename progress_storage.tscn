[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node


class ChapterProgressData extends Reference:
	var chapter_meta
	var resource_path: String
	var data: Dictionary
	
	static func chapter_progress_file_path(chapter_meta_):
		return \"user://progress/%s.json\" % [chapter_meta_.get_id()]

	func _init(chapter_meta_):
		self.chapter_meta = chapter_meta_
		self.resource_path = chapter_progress_file_path(chapter_meta)
		self.data = self.read_()
		self.fill_defaults_()

	func read_():
		print(\"Reading progress data from \", self.resource_path)
		var file = File.new()
		if file.open(self.resource_path, file.READ):
			return {}

		var parse_res = JSON.parse(file.get_as_text())
		
		file.close()

		if parse_res.error:
			return {}
		
		return parse_res.result
	
	func ensure_directory_():
		var dir = Directory.new()
		dir.make_dir_recursive(self.resource_path.replace(
			self.resource_path.split('/')[-1], ''
		))
	
	func write():
		print(\"Writing progress data to \", self.resource_path)
		self.ensure_directory_()

		var file = File.new()

		var err = file.open(self.resource_path, file.WRITE)
		if err:
			print(\"Failed to open \", self.resource_path, \" code \", err)
			return
		
		file.store_string(JSON.print(self.data, '  '))
		file.close()


	func fill_default_value_(dict: Dictionary, key: String, value):
		if key in dict:
			return dict[key]
		else:
			dict[key] = value
			return value

	func fill_defaults_():
		var levels_data = self.fill_default_value_(data, 'levels', {})

		for level_meta in self.chapter_meta.get_levels():
			var level_id = level_meta.get_id()
			var level_data = self.fill_default_value_(levels_data, level_id, {})

			self.fill_default_value_(level_data, 'completed', false)
			self.fill_default_value_(level_data, 'time_spent', 0)
			self.fill_default_value_(level_data, 'attempts', 0)
			self.fill_default_value_(level_data, 'moves', 0)
	
	func get_level_progress(level):
		return LevelProgressData.new(self, level)

class LevelProgressData extends Reference:
	var chapter_progress
	var level
	var level_data

	func _init(chapter_progress_: ChapterProgressData, level_):
		self.chapter_progress = chapter_progress_
		self.level = level_
		self.level_data = chapter_progress.data['levels'][level.get_id()]
	
	func write():
		self.chapter_progress.write()
	
	func is_completed():
		return self.level_data['completed']
		
	func mark_completed():
		self.level_data['completed'] = true
	
	func get_spent_time():
		return self.level_data['time_spent']

	func track_spent_time(time):
		self.level_data['time_spent'] = self.level_data['time_spent'] + time
	
	func get_attempts_count():
		return self.level_data['attempts']
	
	func add_attempt():
		self.level_data['attempts'] = self.level_data['attempts'] + 1
	
	func get_move_count():
		return self.level_data['moves']
	
	func add_move():
		self.level_data['moves'] = self.level_data['moves'] + 1



func _ready():
	pass


func load_chapter_progress(chapter):
	return ChapterProgressData.new(chapter)

func erase_chapter_progress(chapter):
	var dir = Directory.new()
	dir.remove(ChapterProgressData.chapter_progress_file_path(chapter))
"

[node name="Node" type="Node"]
script = SubResource( 1 )
